<?php
/**
 * StItem class in /BazeZF/
 *
 * @category   BazeZF
 * @package    BazeZF_StItem
 * @copyright  Copyright (c) 2008 BazeZF
 * @author     Harold Thetiot (hthetiot)
 */

class BaseZF_StItem extends ArrayObject {

    /**
     * Encrypt ids key
     */
    const EXTENTED_ID_INCREMENT = 123;

    /**
     * Unique Id
     */
    private $_id;

    /**
     * Constructor fill array object from arra
     */
    public function __construct($id, $properties = array())
    {
        $this->_id = self::getIdFromExtendedId($id);

        if(!is_array($properties)) {
            $item = array('value' => $properties);
        }

        parent::__construct($properties);

        $this->setFlags(ArrayObject::ARRAY_AS_PROPS);
    }

    /**
     * @return int
     */
    public function getId() {
        return $this->_id;
    }

    /**
     * Generate extended id from original unique id
     *
     * @return string extended id generated by conversion of id to base 36
     */
    final public function getExtendedId()
    {
        return self::getStItemExtendedId($this->getId());
    }

    /**
     * Get original unique id from extended id string
     *
     * @param string $id extended id
     * @return void unique id
     */
    final static public function getIdFromExtendedId($id)
    {
        if(is_numeric($id)) {
            return $id;
        }

        // if id start with an x, it's an ASCII id, we have to decode it
        if(preg_match('/^x(.*)$/', $id, $m)) {
            $id = base_convert($m[1], 36, 10) - self::EXTENTED_ID_INCREMENT;
        } else {
            return null;
        }

        return $id;
    }

    /**
     * Generate extended id from original unique id
     *
     * @return string extended id generated by conversion of id to base 36
     */
    final static public function getStItemExtendedId($id)
    {
        return 'x' . base_convert($id + self::EXTENTED_ID_INCREMENT, 10, 36);
    }
}

class BaseZF_StItem_Exception extends BaseZF_Exception {}

